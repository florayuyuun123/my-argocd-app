name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install ArgoCD CLI
        run: |
          echo "Installing ArgoCD CLI..."
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd

      - name: Authenticate with AWS ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build, Tag & Push Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          VERSION=$(git rev-parse --short HEAD)
          docker build --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./app
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build-and-scan

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install ArgoCD CLI
        run: |
          echo "Installing ArgoCD CLI..."
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd

      - name: Verify ArgoCD Server Connectivity
        run: |
          echo "Testing connectivity to ArgoCD server..."
          curl -I https://${{ secrets.ARGOCD_SERVER }} --insecure

      - name: Configure AWS CLI and kubeconfig for EKS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region us-west-2 --name flo-eks-cluster
          kubectl get nodes

      - name: ArgoCD Login
        run: |
          echo "Logging into ArgoCD..."
          argocd login https://${{ secrets.ARGOCD_SERVER }} \
            --username admin \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --grpc-web \
            --insecure

      - name: Verify ArgoCD Session
        run: |
          echo "Verifying ArgoCD session..."
          argocd account get-user-info \
            --server https://${{ secrets.ARGOCD_SERVER }} \
            --grpc-web \
            --insecure

      - name: Trigger ArgoCD Sync
        run: |
          echo "Synchronizing ArgoCD application..."
          for i in {1..3}; do
            argocd app sync my-argocd-app \
              --grpc-web \
              --insecure \
              --server https://${{ secrets.ARGOCD_SERVER }} && break || sleep 10
          done

      - name: Debug Environment
        run: |
          echo "Checking Git Configuration"
          git config --list
          echo "Checking Environment Variables"
          printenv

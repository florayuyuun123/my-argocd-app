name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install ArgoCD CLI
        run: |
          echo "Installing ArgoCD CLI..."
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd

      - name: Upgrade npm to v11.0.0
        run: |
          sudo npm install -g npm@11.0.0
          npm --version

      - name: Clear npm Cache
        run: |
          npm cache clean --force
          npm cache verify

      - name: Regenerate Dependencies
        run: |
          rm -rf ./app/package-lock.json ./app/node_modules
          npm set registry https://registry.npmjs.org/
          npm install --prefix ./app

      - name: Cache Node.js Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install npm-force-resolutions
        run: |
          npm install npm-force-resolutions --save-dev

      - name: Apply Forced Resolutions
        run: |
          npx npm-force-resolutions
          npm install --prefix ./app

      - name: Install and Audit Dependencies
        run: |
          npm audit fix --force --prefix ./app

      - name: Build Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          docker build --no-cache -t my-argocd-app:latest ./app

      - name: Tag Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          VERSION=$(git rev-parse --short HEAD)
          docker tag my-argocd-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker tag my-argocd-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Authenticate with AWS ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          VERSION=$(git rev-parse --short HEAD)
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Create Snyk Policy File
        run: |
          mkdir -p ./my-argocd-app
          echo "ignore:
            SNYK-JS-CROSSSPAWN-8303230:
              - '*':
                  reason: 'Temporary ignore until resolved in upstream dependencies'
                  expires: '2024-12-31T00:00:00Z'" > ./my-argocd-app/.snyk

      - name: Install Snyk CLI
        run: |
          npm install -g snyk

      - name: Run Snyk Scan
        continue-on-error: true
        run: |
          snyk test --file=./app/package.json --policy-path=./my-argocd-app --severity-threshold=medium --docker ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build-and-scan

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install ArgoCD CLI
        run: |
          echo "Installing ArgoCD CLI..."
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd

      - name: Verify ArgoCD Server Connectivity
        run: |
          echo "Testing connectivity to ArgoCD server..."
          curl -I https://ad7256489373149abb797ae020cee9fd-911514957.us-west-2.elb.amazonaws.com --insecure

      - name: Configure AWS CLI and kubeconfig
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region us-west-2 --name flo-eks-cluster
          kubectl get nodes  # Verify connection

      - name: ArgoCD Login
        run: |
          echo "Logging into ArgoCD..."
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username admin \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --grpc-web \
            --insecure

      - name: Verify ArgoCD Session
        run: |
          echo "Verifying ArgoCD session..."
          argocd account get-user-info \
            --server ${{ secrets.ARGOCD_SERVER }} \
            --grpc-web \
            --insecure

      - name: Trigger ArgoCD Sync
        run: |
          echo "Synchronizing ArgoCD application..."
          for i in {1..3}; do
            argocd app sync my-argocd-app \
              --grpc-web \
              --insecure \
              --server ${{ secrets.ARGOCD_SERVER }} && break || sleep 10
          done
          
      - name: Debug Environment
        run: |
          echo "Checking Git Configuration"
          git config --list
          echo "Checking Environment Variables"
          printenv
